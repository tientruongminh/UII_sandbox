{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nParkFinder is a comprehensive parking management system designed for Ho Chi Minh City that connects parking lot owners with users seeking parking spaces. The application features real-time parking availability tracking, community-driven updates, a rewards system for user engagement, and advanced search capabilities. Built as a full-stack web application, it serves both motorcycle and car parking needs with location-based services and pricing transparency.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: REST architecture with consistent JSON responses and error handling\n- **Session Management**: PostgreSQL-based session storage using connect-pg-simple\n- **Development**: Hot module replacement and middleware logging for development experience\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema evolution\n- **Database Provider**: Neon Database (serverless PostgreSQL) for production deployment\n- **Connection**: Connection pooling and environment-based configuration\n\n## Core Data Models\n- **Users**: Authentication, profile management, points system, and membership tiers\n- **Parking Lots**: Location data, capacity tracking, pricing, facilities, and real-time availability\n- **Reviews**: User feedback system with ratings and comments\n- **Community Updates**: Real-time status updates from the community\n- **Rewards System**: Points accumulation and redemption functionality\n\n## Authentication and Authorization\n- **Session-based Authentication**: Server-side session management with PostgreSQL storage\n- **User Roles**: Basic user and parking lot owner roles\n- **Demo Mode**: Currently using demo user data for development and testing\n\n## Key Features Implementation\n- **Real-time Availability**: Live tracking of motorcycle and car parking spots\n- **Search and Filtering**: Advanced search with multiple criteria (location, price, vehicle type, facilities)\n- **Community Updates**: User-generated real-time parking status updates\n- **Rewards System**: Points-based engagement with membership tiers (bronze, silver, gold)\n- **Mobile-Responsive Design**: Optimized for both desktop and mobile devices\n- **Mapping Integration**: Simple map visualization for parking lot locations\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@vitejs/plugin-react**: React integration for Vite build system\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library for React applications\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Integration bridge for form validation\n\n## UI and Styling\n- **@radix-ui/react-***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for building type-safe component variants\n- **clsx**: Utility for conditional className construction\n- **lucide-react**: Icon library with React components\n\n## Database and Backend\n- **drizzle-orm**: Type-safe ORM for PostgreSQL operations\n- **drizzle-kit**: Database migration and introspection tools\n- **@neondatabase/serverless**: Serverless PostgreSQL driver for Neon Database\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## Development and Build Tools\n- **typescript**: Static type checking for JavaScript\n- **vite**: Fast build tool and development server\n- **esbuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution engine for Node.js\n\n## Validation and Data Handling\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n- **date-fns**: Modern JavaScript date utility library\n\n## Development Environment\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Replit-specific development tools\n- **postcss**: CSS processing with autoprefixer support","size_bytes":4885},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          dark: \"var(--primary-dark)\",\n          light: \"var(--primary-light)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        danger: {\n          DEFAULT: \"var(--danger)\",\n          foreground: \"var(--danger-foreground)\",\n        },\n        gray: {\n          50: \"var(--gray-50)\",\n          100: \"var(--gray-100)\",\n          200: \"var(--gray-200)\",\n          300: \"var(--gray-300)\",\n          400: \"var(--gray-400)\",\n          500: \"var(--gray-500)\",\n          600: \"var(--gray-600)\",\n          700: \"var(--gray-700)\",\n          800: \"var(--gray-800)\",\n          900: \"var(--gray-900)\",\n        },\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3602},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertParkingLotSchema, \n  insertReviewSchema,\n  insertCommunityUpdateSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Parking Lots\n  app.get(\"/api/parking-lots\", async (req, res) => {\n    try {\n      const lots = await storage.getParkingLots();\n      res.json(lots);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch parking lots\" });\n    }\n  });\n\n  app.get(\"/api/parking-lots/search\", async (req, res) => {\n    try {\n      const { search, vehicleType, maxPrice, availableOnly, minRating } = req.query;\n      \n      const filters: any = {};\n      if (search) filters.search = search as string;\n      if (vehicleType) filters.vehicleType = vehicleType as string;\n      if (maxPrice) filters.maxPrice = parseInt(maxPrice as string);\n      if (availableOnly === 'true') filters.availableOnly = true;\n      if (minRating) filters.minRating = parseFloat(minRating as string);\n\n      const lots = await storage.searchParkingLots(filters);\n      res.json(lots);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search parking lots\" });\n    }\n  });\n\n  app.get(\"/api/parking-lots/:id\", async (req, res) => {\n    try {\n      const lot = await storage.getParkingLot(req.params.id);\n      if (!lot) {\n        return res.status(404).json({ message: \"Parking lot not found\" });\n      }\n      res.json(lot);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch parking lot\" });\n    }\n  });\n\n  app.post(\"/api/parking-lots\", async (req, res) => {\n    try {\n      const data = insertParkingLotSchema.parse(req.body);\n      const lot = await storage.createParkingLot(data);\n      \n      // Award points for registering new parking lot\n      await storage.addPoints(data.ownerId, 50, \"register_lot\", \"Đăng ký bãi xe mới\");\n      \n      res.status(201).json(lot);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\", error });\n    }\n  });\n\n  // Reviews\n  app.get(\"/api/parking-lots/:id/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByParkingLot(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const data = insertReviewSchema.parse(req.body);\n      const review = await storage.createReview(data);\n      \n      // Award points for review\n      await storage.addPoints(data.userId, 5, \"review\", \"Đánh giá bãi xe\");\n      \n      res.status(201).json(review);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\", error });\n    }\n  });\n\n  // Community Updates\n  app.get(\"/api/community-updates\", async (req, res) => {\n    try {\n      const updates = await storage.getCommunityUpdates();\n      res.json(updates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch community updates\" });\n    }\n  });\n\n  app.post(\"/api/community-updates\", async (req, res) => {\n    try {\n      const data = insertCommunityUpdateSchema.parse(req.body);\n      const update = await storage.createCommunityUpdate(data);\n      res.status(201).json(update);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\", error });\n    }\n  });\n\n  // Users\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const data = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(data);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\", error });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.updateUser(req.params.id, req.body);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Rewards\n  app.get(\"/api/rewards\", async (req, res) => {\n    try {\n      const rewards = await storage.getRewards();\n      res.json(rewards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch rewards\" });\n    }\n  });\n\n  app.post(\"/api/rewards/:id/redeem\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n      \n      await storage.redeemReward(userId, req.params.id);\n      res.json({ message: \"Reward redeemed successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to redeem reward\" });\n    }\n  });\n\n  // Points History\n  app.get(\"/api/users/:id/points-history\", async (req, res) => {\n    try {\n      const history = await storage.getPointsHistory(req.params.id);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch points history\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5802},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type ParkingLot, \n  type InsertParkingLot,\n  type Review,\n  type InsertReview,\n  type CommunityUpdate,\n  type InsertCommunityUpdate,\n  type Reward,\n  type UserReward,\n  type PointsHistory\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Parking Lots\n  getParkingLots(): Promise<ParkingLot[]>;\n  getParkingLot(id: string): Promise<ParkingLot | undefined>;\n  getParkingLotsByOwner(ownerId: string): Promise<ParkingLot[]>;\n  createParkingLot(lot: InsertParkingLot): Promise<ParkingLot>;\n  updateParkingLot(id: string, updates: Partial<ParkingLot>): Promise<ParkingLot | undefined>;\n  searchParkingLots(filters: {\n    search?: string;\n    vehicleType?: string;\n    maxDistance?: number;\n    maxPrice?: number;\n    availableOnly?: boolean;\n    minRating?: number;\n  }): Promise<ParkingLot[]>;\n  \n  // Reviews\n  getReviewsByParkingLot(parkingLotId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  \n  // Community Updates\n  getCommunityUpdates(limit?: number): Promise<CommunityUpdate[]>;\n  createCommunityUpdate(update: InsertCommunityUpdate): Promise<CommunityUpdate>;\n  \n  // Rewards\n  getRewards(): Promise<Reward[]>;\n  getUserRewards(userId: string): Promise<UserReward[]>;\n  redeemReward(userId: string, rewardId: string): Promise<void>;\n  \n  // Points\n  getPointsHistory(userId: string): Promise<PointsHistory[]>;\n  addPoints(userId: string, points: number, activity: string, description?: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private parkingLots: Map<string, ParkingLot> = new Map();\n  private reviews: Map<string, Review> = new Map();\n  private communityUpdates: Map<string, CommunityUpdate> = new Map();\n  private rewards: Map<string, Reward> = new Map();\n  private userRewards: Map<string, UserReward> = new Map();\n  private pointsHistory: Map<string, PointsHistory> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed initial rewards\n    const rewardsData = [\n      { name: \"Voucher Grab 20k\", description: \"Giảm 20,000đ cho chuyến đi\", pointsCost: 100, category: \"transport\", icon: \"fas fa-gift\" },\n      { name: \"Voucher Starbucks\", description: \"Giảm 25,000đ đồ uống\", pointsCost: 150, category: \"food\", icon: \"fas fa-coffee\" },\n      { name: \"Voucher xăng 50k\", description: \"Petrolimex/Shell\", pointsCost: 300, category: \"fuel\", icon: \"fas fa-gas-pump\" },\n    ];\n\n    rewardsData.forEach(reward => {\n      const id = randomUUID();\n      this.rewards.set(id, { ...reward, id, isActive: true });\n    });\n\n    // Seed sample parking lots in Ho Chi Minh City\n    const parkingLotsData = [\n      {\n        name: \"Bãi xe Nguyễn Huệ\",\n        address: \"78 Nguyễn Huệ, Quận 1, TP.HCM\",\n        latitude: \"10.7769\",\n        longitude: \"106.7009\",\n        ownerId: \"owner1\",\n        motorcycleCapacity: 50,\n        carCapacity: 20,\n        motorcyclePrice: 5000,\n        carPrice: 15000,\n        currentMotorcycleSpots: 35,\n        currentCarSpots: 8,\n        facilities: [\"covered\", \"security\"],\n        operatingHours: { openTime: \"06:00\", closeTime: \"22:00\", is24h: false },\n        rating: \"4.8\",\n        totalReviews: 24,\n        status: \"active\",\n        description: \"Bãi xe rộng rãi tại trung tâm thành phố\"\n      },\n      {\n        name: \"Bãi xe Vincom Center\",\n        address: \"70-72 Lê Thánh Tôn, Quận 1, TP.HCM\",\n        latitude: \"10.7829\",\n        longitude: \"106.7024\",\n        ownerId: \"owner2\", \n        motorcycleCapacity: 100,\n        carCapacity: 50,\n        motorcyclePrice: 8000,\n        carPrice: 15000,\n        currentMotorcycleSpots: 0,\n        currentCarSpots: 0,\n        facilities: [\"covered\", \"security\", \"camera\", \"toilet\"],\n        operatingHours: { openTime: \"08:00\", closeTime: \"22:00\", is24h: false },\n        rating: \"4.5\",\n        totalReviews: 156,\n        status: \"active\",\n        description: \"Bãi xe tại trung tâm thương mại Vincom\"\n      },\n      {\n        name: \"Bãi xe Chợ Bến Thành\",\n        address: \"Lê Lợi, Quận 1, TP.HCM\",\n        latitude: \"10.7720\",\n        longitude: \"106.6980\",\n        ownerId: \"owner3\",\n        motorcycleCapacity: 80,\n        carCapacity: 30,\n        motorcyclePrice: 3000,\n        carPrice: 12000,\n        currentMotorcycleSpots: 45,\n        currentCarSpots: 15,\n        facilities: [\"security\"],\n        operatingHours: { openTime: \"05:00\", closeTime: \"23:00\", is24h: false },\n        rating: \"4.2\",\n        totalReviews: 89,\n        status: \"active\",\n        description: \"Bãi xe gần chợ Bến Thành, thuận tiện mua sắm\"\n      }\n    ];\n\n    parkingLotsData.forEach(lot => {\n      const id = randomUUID();\n      this.parkingLots.set(id, { ...lot, id, createdAt: new Date() });\n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      points: 0,\n      memberTier: \"bronze\",\n      createdAt: new Date(),\n      phone: insertUser.phone || null,\n      vehicleType: insertUser.vehicleType || \"motorcycle\"\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Parking Lots\n  async getParkingLots(): Promise<ParkingLot[]> {\n    return Array.from(this.parkingLots.values());\n  }\n\n  async getParkingLot(id: string): Promise<ParkingLot | undefined> {\n    return this.parkingLots.get(id);\n  }\n\n  async getParkingLotsByOwner(ownerId: string): Promise<ParkingLot[]> {\n    return Array.from(this.parkingLots.values()).filter(lot => lot.ownerId === ownerId);\n  }\n\n  async createParkingLot(insertLot: InsertParkingLot): Promise<ParkingLot> {\n    const id = randomUUID();\n    const lot: ParkingLot = { \n      ...insertLot, \n      id,\n      motorcycleCapacity: insertLot.motorcycleCapacity || 0,\n      carCapacity: insertLot.carCapacity || 0,\n      currentMotorcycleSpots: insertLot.motorcycleCapacity || 0,\n      currentCarSpots: insertLot.carCapacity || 0,\n      rating: \"0\",\n      totalReviews: 0,\n      status: \"active\",\n      createdAt: new Date()\n    };\n    this.parkingLots.set(id, lot);\n    return lot;\n  }\n\n  async updateParkingLot(id: string, updates: Partial<ParkingLot>): Promise<ParkingLot | undefined> {\n    const lot = this.parkingLots.get(id);\n    if (!lot) return undefined;\n    \n    const updatedLot = { ...lot, ...updates };\n    this.parkingLots.set(id, updatedLot);\n    return updatedLot;\n  }\n\n  async searchParkingLots(filters: {\n    search?: string;\n    vehicleType?: string;\n    maxDistance?: number;\n    maxPrice?: number;\n    availableOnly?: boolean;\n    minRating?: number;\n  }): Promise<ParkingLot[]> {\n    let lots = Array.from(this.parkingLots.values()).filter(lot => lot.status === \"active\");\n\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      lots = lots.filter(lot => \n        lot.name.toLowerCase().includes(searchLower) || \n        lot.address.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (filters.availableOnly) {\n      lots = lots.filter(lot => \n        lot.currentMotorcycleSpots > 0 || lot.currentCarSpots > 0\n      );\n    }\n\n    if (filters.vehicleType === \"motorcycle\") {\n      lots = lots.filter(lot => lot.motorcycleCapacity > 0);\n      if (filters.maxPrice) {\n        lots = lots.filter(lot => lot.motorcyclePrice <= filters.maxPrice!);\n      }\n    }\n\n    if (filters.vehicleType === \"car\") {\n      lots = lots.filter(lot => lot.carCapacity > 0);\n      if (filters.maxPrice) {\n        lots = lots.filter(lot => lot.carPrice <= filters.maxPrice!);\n      }\n    }\n\n    if (filters.minRating) {\n      lots = lots.filter(lot => parseFloat(lot.rating || \"0\") >= filters.minRating!);\n    }\n\n    return lots;\n  }\n\n  // Reviews\n  async getReviewsByParkingLot(parkingLotId: string): Promise<Review[]> {\n    return Array.from(this.reviews.values()).filter(review => review.parkingLotId === parkingLotId);\n  }\n\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const id = randomUUID();\n    const review: Review = { ...insertReview, id, createdAt: new Date(), comment: insertReview.comment || null };\n    this.reviews.set(id, review);\n\n    // Update parking lot rating\n    const lot = this.parkingLots.get(insertReview.parkingLotId);\n    if (lot) {\n      const reviews = await this.getReviewsByParkingLot(insertReview.parkingLotId);\n      const totalRating = reviews.reduce((sum, r) => sum + r.rating, 0);\n      const avgRating = (totalRating / reviews.length).toFixed(2);\n      \n      await this.updateParkingLot(insertReview.parkingLotId, {\n        rating: avgRating,\n        totalReviews: reviews.length\n      });\n    }\n\n    return review;\n  }\n\n  // Community Updates\n  async getCommunityUpdates(limit = 50): Promise<CommunityUpdate[]> {\n    const updates = Array.from(this.communityUpdates.values())\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime())\n      .slice(0, limit);\n    return updates;\n  }\n\n  async createCommunityUpdate(insertUpdate: InsertCommunityUpdate): Promise<CommunityUpdate> {\n    const id = randomUUID();\n    const update: CommunityUpdate = { \n      ...insertUpdate, \n      id, \n      pointsEarned: 10,\n      createdAt: new Date(),\n      comment: insertUpdate.comment || null\n    };\n    this.communityUpdates.set(id, update);\n\n    // Award points to user\n    await this.addPoints(insertUpdate.userId, 10, \"status_update\", \"Cập nhật tình trạng bãi xe\");\n\n    return update;\n  }\n\n  // Rewards\n  async getRewards(): Promise<Reward[]> {\n    return Array.from(this.rewards.values()).filter(reward => reward.isActive);\n  }\n\n  async getUserRewards(userId: string): Promise<UserReward[]> {\n    return Array.from(this.userRewards.values()).filter(reward => reward.userId === userId);\n  }\n\n  async redeemReward(userId: string, rewardId: string): Promise<void> {\n    const reward = this.rewards.get(rewardId);\n    const user = this.users.get(userId);\n    \n    if (!reward || !user) {\n      throw new Error(\"Reward or user not found\");\n    }\n\n    if (user.points < reward.pointsCost) {\n      throw new Error(\"Insufficient points\");\n    }\n\n    // Deduct points\n    await this.updateUser(userId, { points: user.points - reward.pointsCost });\n    \n    // Record redemption\n    const userRewardId = randomUUID();\n    this.userRewards.set(userRewardId, {\n      id: userRewardId,\n      userId,\n      rewardId,\n      redeemedAt: new Date()\n    });\n\n    // Add to points history\n    await this.addPoints(userId, -reward.pointsCost, \"reward_redemption\", reward.name);\n  }\n\n  // Points\n  async getPointsHistory(userId: string): Promise<PointsHistory[]> {\n    return Array.from(this.pointsHistory.values())\n      .filter(history => history.userId === userId)\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async addPoints(userId: string, points: number, activity: string, description?: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (!user) return;\n\n    // Update user points\n    const newPoints = Math.max(0, user.points + points);\n    let newTier = user.memberTier;\n    \n    if (newPoints >= 1500) newTier = \"gold\";\n    else if (newPoints >= 500) newTier = \"silver\";\n    else newTier = \"bronze\";\n\n    await this.updateUser(userId, { points: newPoints, memberTier: newTier });\n\n    // Add to history\n    const historyId = randomUUID();\n    this.pointsHistory.set(historyId, {\n      id: historyId,\n      userId,\n      points,\n      activity,\n      description: description || null,\n      createdAt: new Date()\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12669},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, decimal, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  vehicleType: text(\"vehicle_type\").notNull().default(\"motorcycle\"), // motorcycle, car, both\n  points: integer(\"points\").notNull().default(0),\n  memberTier: text(\"member_tier\").notNull().default(\"bronze\"), // bronze, silver, gold\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const parkingLots = pgTable(\"parking_lots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  ownerId: varchar(\"owner_id\").references(() => users.id).notNull(),\n  motorcycleCapacity: integer(\"motorcycle_capacity\").notNull().default(0),\n  carCapacity: integer(\"car_capacity\").notNull().default(0),\n  motorcyclePrice: integer(\"motorcycle_price\").notNull().default(0), // VND per hour\n  carPrice: integer(\"car_price\").notNull().default(0), // VND per hour\n  currentMotorcycleSpots: integer(\"current_motorcycle_spots\").notNull().default(0),\n  currentCarSpots: integer(\"current_car_spots\").notNull().default(0),\n  facilities: json(\"facilities\").$type<string[]>().default([]), // covered, security, camera, toilet, water, wifi\n  operatingHours: json(\"operating_hours\").$type<{openTime: string, closeTime: string, is24h: boolean}>().notNull(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  totalReviews: integer(\"total_reviews\").default(0),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, pending\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parkingLotId: varchar(\"parking_lot_id\").references(() => parkingLots.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communityUpdates = pgTable(\"community_updates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parkingLotId: varchar(\"parking_lot_id\").references(() => parkingLots.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  status: text(\"status\").notNull(), // available, full, almost_full\n  comment: text(\"comment\"),\n  pointsEarned: integer(\"points_earned\").notNull().default(10),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const rewards = pgTable(\"rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  pointsCost: integer(\"points_cost\").notNull(),\n  category: text(\"category\").notNull(), // transport, food, fuel, other\n  icon: text(\"icon\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const userRewards = pgTable(\"user_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  rewardId: varchar(\"reward_id\").references(() => rewards.id).notNull(),\n  redeemedAt: timestamp(\"redeemed_at\").defaultNow(),\n});\n\nexport const pointsHistory = pgTable(\"points_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  points: integer(\"points\").notNull(), // positive for earned, negative for spent\n  activity: text(\"activity\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  points: true,\n  memberTier: true,\n  createdAt: true,\n});\n\nexport const insertParkingLotSchema = createInsertSchema(parkingLots).omit({\n  id: true,\n  currentMotorcycleSpots: true,\n  currentCarSpots: true,\n  rating: true,\n  totalReviews: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunityUpdateSchema = createInsertSchema(communityUpdates).omit({\n  id: true,\n  pointsEarned: true,\n  createdAt: true,\n});\n\nexport const insertRewardSchema = createInsertSchema(rewards).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ParkingLot = typeof parkingLots.$inferSelect;\nexport type InsertParkingLot = z.infer<typeof insertParkingLotSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type CommunityUpdate = typeof communityUpdates.$inferSelect;\nexport type InsertCommunityUpdate = z.infer<typeof insertCommunityUpdateSchema>;\nexport type Reward = typeof rewards.$inferSelect;\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\nexport type UserReward = typeof userRewards.$inferSelect;\nexport type PointsHistory = typeof pointsHistory.$inferSelect;\n","size_bytes":5654},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Search from \"@/pages/search\";\nimport RegisterLot from \"@/pages/register-lot\";\nimport Community from \"@/pages/community\";\nimport Rewards from \"@/pages/rewards\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/search\" component={Search} />\n      <Route path=\"/register-lot\" component={RegisterLot} />\n      <Route path=\"/community\" component={Community} />\n      <Route path=\"/rewards\" component={Rewards} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [currentUser] = useState({\n    id: \"demo-user\",\n    name: \"Nguyễn Văn A\",\n    email: \"nguyenvana@email.com\",\n    initials: \"NV\",\n    points: 1250,\n    tier: \"silver\"\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gray-50\">\n          <div className=\"flex min-h-screen\">\n            <Sidebar currentUser={currentUser} />\n            <main className=\"flex-1 flex flex-col min-h-screen\">\n              <Router />\n            </main>\n          </div>\n          <MobileNav />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1703},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(220 91.1765% 54.1176%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-dark: hsl(220 91.1765% 44.3137%);\n  --primary-light: hsl(220 91.1765% 64.7059%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --success: hsl(142.3529 71.8182% 43.3333%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(36.2069 100% 45.6863%);\n  --warning-foreground: hsl(0 0% 100%);\n  --danger: hsl(4.5455 89.6226% 58.4314%);\n  --danger-foreground: hsl(0 0% 100%);\n  --gray-50: hsl(220 14.2857% 97.6471%);\n  --gray-100: hsl(220 14.2857% 95.4902%);\n  --gray-200: hsl(220 13.0435% 90.9804%);\n  --gray-300: hsl(220 12.1212% 81.7647%);\n  --gray-400: hsl(220 8.5714% 62.7451%);\n  --gray-500: hsl(220 8.5714% 42.1569%);\n  --gray-600: hsl(220 12.9032% 29.4118%);\n  --gray-700: hsl(220 16.6667% 22.1569%);\n  --gray-800: hsl(220 20% 12.3529%);\n  --gray-900: hsl(220 25% 6.8627%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-gray-900;\n  }\n}\n","size_bytes":5786},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/community.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Users, TrendingUp, Flag, HelpCircle, Plus, Circle } from \"lucide-react\";\nimport type { CommunityUpdate, ParkingLot, InsertCommunityUpdate } from \"@shared/schema\";\n\nexport default function Community() {\n  const [selectedLotId, setSelectedLotId] = useState<string>(\"\");\n  const [updateComment, setUpdateComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: parkingLots = [] } = useQuery({\n    queryKey: [\"/api/parking-lots\"],\n  });\n\n  const { data: communityUpdates = [], isLoading } = useQuery({\n    queryKey: [\"/api/community-updates\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const submitUpdateMutation = useMutation({\n    mutationFn: async (data: InsertCommunityUpdate) => {\n      const response = await apiRequest(\"POST\", \"/api/community-updates\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cảm ơn bạn!\",\n        description: \"Cập nhật đã được gửi thành công. Bạn nhận được 10 điểm thưởng!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/community-updates\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/parking-lots\"] });\n      setSelectedLotId(\"\");\n      setUpdateComment(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể gửi cập nhật. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (status: \"available\" | \"full\") => {\n    if (!selectedLotId) {\n      toast({\n        title: \"Lỗi\",\n        description: \"Vui lòng chọn bãi xe trước khi cập nhật.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updateData: InsertCommunityUpdate = {\n      parkingLotId: selectedLotId,\n      userId: \"demo-user\", // In real app, get from auth\n      status,\n      comment: updateComment.trim() || undefined,\n    };\n\n    submitUpdateMutation.mutate(updateData);\n  };\n\n  const getUpdateStatusBadge = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return (\n          <Badge className=\"bg-success hover:bg-success text-white\">\n            <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n            Còn chỗ\n          </Badge>\n        );\n      case \"full\":\n        return (\n          <Badge variant=\"destructive\">\n            <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n            Hết chỗ\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\">\n            <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n            {status}\n          </Badge>\n        );\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Vừa xong\";\n    if (diffInMinutes < 60) return `${diffInMinutes} phút trước`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} giờ trước`;\n    return `${Math.floor(diffInMinutes / 1440)} ngày trước`;\n  };\n\n  const mockTopContributors = [\n    { name: \"Minh Tuấn\", points: 450, rank: 1 },\n    { name: \"Thu Linh\", points: 380, rank: 2 },\n    { name: \"Hải Nam\", points: 320, rank: 3 },\n  ];\n\n  const mockStats = {\n    todayUpdates: (communityUpdates as CommunityUpdate[]).length,\n    activeMembers: 1234,\n    registeredLots: (parkingLots as ParkingLot[]).length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Đang tải cập nhật cộng đồng...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 bg-white\" data-testid=\"community-page\">\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Cộng đồng</h1>\n          <p className=\"text-gray-600 mt-1\">Cập nhật và chia sẻ thông tin bãi xe với mọi người</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Updates Feed */}\n          <div className=\"lg:col-span-2\">\n            {/* Quick Update */}\n            <Card className=\"mb-6\" data-testid=\"quick-update-card\">\n              <CardHeader>\n                <CardTitle>Cập nhật nhanh</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Select value={selectedLotId} onValueChange={setSelectedLotId}>\n                  <SelectTrigger data-testid=\"lot-select\">\n                    <SelectValue placeholder=\"Chọn bãi xe để cập nhật\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(parkingLots as ParkingLot[]).map((lot: ParkingLot) => (\n                      <SelectItem key={lot.id} value={lot.id}>\n                        {lot.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button \n                    onClick={() => handleStatusUpdate(\"available\")}\n                    className=\"bg-success hover:bg-success/90 text-white\"\n                    disabled={submitUpdateMutation.isPending}\n                    data-testid=\"available-button\"\n                  >\n                    <Circle className=\"mr-2 h-4 w-4 fill-current\" />\n                    Còn chỗ\n                  </Button>\n                  <Button \n                    onClick={() => handleStatusUpdate(\"full\")}\n                    variant=\"destructive\"\n                    disabled={submitUpdateMutation.isPending}\n                    data-testid=\"full-button\"\n                  >\n                    <Circle className=\"mr-2 h-4 w-4 fill-current\" />\n                    Hết chỗ\n                  </Button>\n                </div>\n                \n                <Textarea \n                  placeholder=\"Thêm ghi chú (tùy chọn)\"\n                  rows={2}\n                  value={updateComment}\n                  onChange={(e) => setUpdateComment(e.target.value)}\n                  data-testid=\"comment-textarea\"\n                />\n                \n                <Button \n                  className=\"w-full\" \n                  disabled={!selectedLotId || submitUpdateMutation.isPending}\n                  onClick={() => {\n                    if (selectedLotId) {\n                      handleStatusUpdate(\"available\"); // Default to available, user will click specific button\n                    }\n                  }}\n                  data-testid=\"submit-update-button\"\n                >\n                  {submitUpdateMutation.isPending ? \"Đang gửi...\" : \"Gửi cập nhật\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Recent Updates */}\n            <div className=\"space-y-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Cập nhật gần đây</h2>\n              \n              {(communityUpdates as CommunityUpdate[]).length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                    <p className=\"text-gray-500\">Chưa có cập nhật nào từ cộng đồng</p>\n                    <p className=\"text-sm text-gray-400 mt-1\">Hãy là người đầu tiên chia sẻ thông tin!</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\" data-testid=\"updates-feed\">\n                  {(communityUpdates as CommunityUpdate[]).map((update: CommunityUpdate) => {\n                    const lot = (parkingLots as ParkingLot[]).find((l: ParkingLot) => l.id === update.parkingLotId);\n                    return (\n                      <Card key={update.id} data-testid={`update-${update.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n                              {update.userId.slice(0, 2).toUpperCase()}\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <span className=\"font-medium text-gray-900\">Người dùng</span>\n                                <span className=\"text-sm text-gray-500\">\n                                  {update.createdAt ? formatTimeAgo(new Date(update.createdAt)) : \"Vừa xong\"}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-gray-700 mb-2\">\n                                Cập nhật tình trạng cho <strong>{lot?.name || \"Bãi xe\"}</strong>\n                              </p>\n                              <div className=\"flex items-center space-x-3\">\n                                {getUpdateStatusBadge(update.status)}\n                                <span className=\"text-xs text-gray-500\">\n                                  +{update.pointsEarned} điểm\n                                </span>\n                              </div>\n                              {update.comment && (\n                                <p className=\"text-xs text-gray-600 mt-1 italic\">\n                                  \"{update.comment}\"\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Top Contributors */}\n            <Card data-testid=\"top-contributors\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"mr-2 h-5 w-5\" />\n                  Top đóng góp tuần này\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockTopContributors.map((contributor) => (\n                    <div key={contributor.rank} className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold text-sm ${\n                        contributor.rank === 1 ? \"bg-warning\" : \n                        contributor.rank === 2 ? \"bg-gray-400\" : \"bg-orange-500\"\n                      }`}>\n                        {contributor.rank}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">{contributor.name}</p>\n                        <p className=\"text-xs text-gray-500\">{contributor.points} điểm</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Community Stats */}\n            <Card data-testid=\"community-stats\">\n              <CardHeader>\n                <CardTitle>Thống kê cộng đồng</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Cập nhật hôm nay</span>\n                    <span className=\"text-sm font-medium text-gray-900\" data-testid=\"today-updates\">\n                      {mockStats.todayUpdates}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Thành viên hoạt động</span>\n                    <span className=\"text-sm font-medium text-gray-900\" data-testid=\"active-members\">\n                      {mockStats.activeMembers.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Bãi xe được đăng ký</span>\n                    <span className=\"text-sm font-medium text-gray-900\" data-testid=\"registered-lots\">\n                      {mockStats.registeredLots}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card data-testid=\"quick-actions\">\n              <CardHeader>\n                <CardTitle>Hành động nhanh</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-left p-3 h-auto\"\n                    onClick={() => window.location.href = \"/register-lot\"}\n                    data-testid=\"action-register-lot\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4 text-primary\" />\n                    Đăng ký bãi xe mới\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-left p-3 h-auto\"\n                    data-testid=\"action-report-issue\"\n                  >\n                    <Flag className=\"mr-2 h-4 w-4 text-warning\" />\n                    Báo cáo vấn đề\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-left p-3 h-auto\"\n                    data-testid=\"action-help\"\n                  >\n                    <HelpCircle className=\"mr-2 h-4 w-4 text-primary\" />\n                    Hướng dẫn sử dụng\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15056},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, MapPin, Car, Bike, SlidersHorizontal } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SimpleMap from \"@/components/map/simple-map\";\nimport ParkingCard from \"@/components/parking/parking-card\";\nimport ParkingDetailModal from \"@/components/parking/parking-detail-modal\";\nimport type { ParkingLot } from \"@shared/schema\";\n\nexport default function Home() {\n  const [selectedLot, setSelectedLot] = useState<ParkingLot | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeFilters, setActiveFilters] = useState<Set<string>>(new Set([\"nearby\"]));\n\n  const { data: parkingLots = [], isLoading } = useQuery({\n    queryKey: [\"/api/parking-lots\"],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const filteredLots = (parkingLots as ParkingLot[]).filter((lot: ParkingLot) => {\n    if (searchQuery) {\n      return lot.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n             lot.address.toLowerCase().includes(searchQuery.toLowerCase());\n    }\n    \n    if (activeFilters.has(\"available\")) {\n      return lot.currentMotorcycleSpots > 0 || lot.currentCarSpots > 0;\n    }\n    \n    if (activeFilters.has(\"motorcycle\") && !activeFilters.has(\"car\")) {\n      return lot.motorcycleCapacity > 0;\n    }\n    \n    if (activeFilters.has(\"car\") && !activeFilters.has(\"motorcycle\")) {\n      return lot.carCapacity > 0;\n    }\n    \n    return true;\n  });\n\n  const toggleFilter = (filter: string) => {\n    const newFilters = new Set(activeFilters);\n    if (newFilters.has(filter)) {\n      newFilters.delete(filter);\n    } else {\n      newFilters.add(filter);\n    }\n    setActiveFilters(newFilters);\n  };\n\n  const handleParkingLotClick = (lot: ParkingLot) => {\n    setSelectedLot(lot);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Đang tải dữ liệu bãi xe...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col\" data-testid=\"home-page\">\n      {/* Search Bar */}\n      <div className=\"bg-white border-b border-gray-200 p-4\" data-testid=\"search-section\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Tìm kiếm địa chỉ hoặc địa điểm...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 pr-4 py-3\"\n              data-testid=\"search-input\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          </div>\n          \n          {/* Quick Filters */}\n          <div className=\"flex items-center space-x-3 mt-3 overflow-x-auto pb-2\" data-testid=\"quick-filters\">\n            <Button\n              variant={activeFilters.has(\"nearby\") ? \"default\" : \"secondary\"}\n              size=\"sm\"\n              onClick={() => toggleFilter(\"nearby\")}\n              className=\"whitespace-nowrap\"\n              data-testid=\"filter-nearby\"\n            >\n              <MapPin className=\"mr-2 h-3 w-3\" />\n              Gần tôi\n            </Button>\n            <Button\n              variant={activeFilters.has(\"available\") ? \"default\" : \"secondary\"}\n              size=\"sm\"\n              onClick={() => toggleFilter(\"available\")}\n              className=\"whitespace-nowrap\"\n              data-testid=\"filter-available\"\n            >\n              <div className=\"w-2 h-2 bg-success rounded-full mr-2\"></div>\n              Còn chỗ\n            </Button>\n            <Button\n              variant={activeFilters.has(\"motorcycle\") ? \"default\" : \"secondary\"}\n              size=\"sm\"\n              onClick={() => toggleFilter(\"motorcycle\")}\n              className=\"whitespace-nowrap\"\n              data-testid=\"filter-motorcycle\"\n            >\n              <Bike className=\"mr-2 h-3 w-3\" />\n              Xe máy\n            </Button>\n            <Button\n              variant={activeFilters.has(\"car\") ? \"default\" : \"secondary\"}\n              size=\"sm\"\n              onClick={() => toggleFilter(\"car\")}\n              className=\"whitespace-nowrap\"\n              data-testid=\"filter-car\"\n            >\n              <Car className=\"mr-2 h-3 w-3\" />\n              Ô tô\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              className=\"whitespace-nowrap\"\n              data-testid=\"filter-advanced\"\n            >\n              <SlidersHorizontal className=\"mr-2 h-3 w-3\" />\n              Bộ lọc\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex flex-col md:flex-row\">\n        {/* Map Area */}\n        <div className=\"relative flex-1 h-64 md:h-auto\">\n          <SimpleMap \n            parkingLots={filteredLots} \n            onParkingLotClick={handleParkingLotClick}\n          />\n        </div>\n\n        {/* Parking Lots List */}\n        <div className=\"md:w-80 bg-white border-t md:border-t-0 md:border-l border-gray-200 flex flex-col\" data-testid=\"parking-list\">\n          <div className=\"p-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Bãi xe gần bạn</h2>\n            <p className=\"text-sm text-gray-500\" data-testid=\"results-count\">\n              Tìm thấy {filteredLots.length} bãi xe trong bán kính 2km\n            </p>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto\">\n            {filteredLots.length === 0 ? (\n              <div className=\"p-8 text-center text-gray-500\" data-testid=\"no-results\">\n                <MapPin className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>Không tìm thấy bãi xe nào</p>\n                <p className=\"text-sm\">Thử thay đổi bộ lọc hoặc từ khóa tìm kiếm</p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {filteredLots.map((lot: ParkingLot) => (\n                  <ParkingCard\n                    key={lot.id}\n                    lot={lot}\n                    onClick={() => handleParkingLotClick(lot)}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Parking Detail Modal */}\n      <ParkingDetailModal\n        lot={selectedLot}\n        open={!!selectedLot}\n        onOpenChange={(open) => !open && setSelectedLot(null)}\n      />\n    </div>\n  );\n}\n","size_bytes":6826},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/register-lot.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertParkingLotSchema } from \"@shared/schema\";\nimport type { InsertParkingLot } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CloudUpload, MapPin, Upload, Download, Zap } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst formSchema = insertParkingLotSchema.extend({\n  openTime: z.string().min(1, \"Giờ mở cửa là bắt buộc\"),\n  closeTime: z.string().min(1, \"Giờ đóng cửa là bắt buộc\"),\n  is24h: z.boolean().default(false),\n  selectedFacilities: z.array(z.string()).default([]),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst facilityOptions = [\n  { id: \"covered\", label: \"Có mái che\" },\n  { id: \"security\", label: \"Bảo vệ 24/7\" },\n  { id: \"camera\", label: \"Camera an ninh\" },\n  { id: \"toilet\", label: \"Toilet\" },\n  { id: \"water\", label: \"Nước uống\" },\n  { id: \"wifi\", label: \"WiFi miễn phí\" },\n];\n\n// Danh sách địa chỉ có sẵn tại TP.HCM\nconst commonAddresses = [\n  \"78 Nguyễn Huệ, Quận 1, TP.HCM\",\n  \"70-72 Lê Thánh Tôn, Quận 1, TP.HCM\", \n  \"Lê Lợi, Quận 1, TP.HCM\",\n  \"Đại học FPT, Quận 9, TP.HCM\",\n  \"Đại học Bách Khoa, Quận 10, TP.HCM\",\n  \"Bệnh viện Chợ Rẫy, Quận 5, TP.HCM\",\n  \"Sân bay Tân Sơn Nhất, Quận Tân Bình, TP.HCM\",\n  \"Chợ Bến Thành, Quận 1, TP.HCM\",\n  \"Nhà Thờ Đức Bà, Quận 1, TP.HCM\",\n  \"Bitexco Financial Tower, Quận 1, TP.HCM\"\n];\n\n// Danh sách khu vực phổ biến\nconst popularDistricts = [\n  { id: \"q1\", name: \"Quận 1\", coords: { lat: \"10.7769\", lng: \"106.7009\" } },\n  { id: \"q3\", name: \"Quận 3\", coords: { lat: \"10.7867\", lng: \"106.6910\" } },\n  { id: \"q5\", name: \"Quận 5\", coords: { lat: \"10.7592\", lng: \"106.6746\" } },\n  { id: \"q7\", name: \"Quận 7\", coords: { lat: \"10.7379\", lng: \"106.7197\" } },\n  { id: \"q9\", name: \"Quận 9\", coords: { lat: \"10.8411\", lng: \"106.8096\" } },\n  { id: \"q10\", name: \"Quận 10\", coords: { lat: \"10.7720\", lng: \"106.6710\" } },\n  { id: \"tb\", name: \"Quận Tân Bình\", coords: { lat: \"10.8142\", lng: \"106.6438\" } },\n  { id: \"pn\", name: \"Quận Phú Nhuận\", coords: { lat: \"10.7980\", lng: \"106.6947\" } }\n];\n\nexport default function RegisterLot() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showAddressSuggestions, setShowAddressSuggestions] = useState(false);\n  const [addressQuery, setAddressQuery] = useState(\"\");\n  const [showDataIntegration, setShowDataIntegration] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      latitude: \"10.7769\", // Default to Ho Chi Minh City center\n      longitude: \"106.7009\",\n      ownerId: \"demo-user\", // In real app, get from auth\n      motorcycleCapacity: 0,\n      carCapacity: 0,\n      motorcyclePrice: 0,\n      carPrice: 0,\n      facilities: [],\n      description: \"\",\n      openTime: \"06:00\",\n      closeTime: \"22:00\",\n      is24h: false,\n      selectedFacilities: [],\n    },\n  });\n\n  const createLotMutation = useMutation({\n    mutationFn: async (data: InsertParkingLot) => {\n      const response = await apiRequest(\"POST\", \"/api/parking-lots\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công!\",\n        description: \"Bãi xe đã được đăng ký thành công. Bạn nhận được 50 điểm thưởng!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/parking-lots\"] });\n      form.reset();\n      setShowDataIntegration(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể đăng ký bãi xe. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredAddresses = commonAddresses.filter(addr => \n    addr.toLowerCase().includes(addressQuery.toLowerCase())\n  );\n\n  const handleAddressSelect = (address: string) => {\n    form.setValue(\"address\", address);\n    setAddressQuery(address);\n    setShowAddressSuggestions(false);\n    \n    // Tự động điền tọa độ dựa trên địa chỉ\n    const district = popularDistricts.find(d => address.includes(d.name));\n    if (district) {\n      form.setValue(\"latitude\", district.coords.lat);\n      form.setValue(\"longitude\", district.coords.lng);\n      toast({\n        title: \"Đã tự động điền tọa độ\",\n        description: `Tọa độ đã được cập nhật cho ${district.name}`,\n      });\n    }\n  };\n\n  const handleDistrictSelect = (districtId: string) => {\n    const district = popularDistricts.find(d => d.id === districtId);\n    if (district) {\n      form.setValue(\"latitude\", district.coords.lat);\n      form.setValue(\"longitude\", district.coords.lng);\n      toast({\n        title: \"Tọa độ đã được cập nhật\",\n        description: `Vị trí ${district.name} đã được thiết lập`,\n      });\n    }\n  };\n\n  const handleImportData = () => {\n    // Mô phỏng import dữ liệu từ file\n    const sampleData = {\n      name: \"Bãi xe mẫu từ hệ thống\",\n      address: \"123 Đường ABC, Quận 1, TP.HCM\",\n      latitude: \"10.7769\",\n      longitude: \"106.7009\",\n      motorcycleCapacity: 50,\n      carCapacity: 20,\n      motorcyclePrice: 5000,\n      carPrice: 15000,\n      selectedFacilities: [\"covered\", \"security\"],\n      description: \"Bãi xe được import từ hệ thống dữ liệu có sẵn\"\n    };\n    \n    Object.entries(sampleData).forEach(([key, value]) => {\n      form.setValue(key as any, value);\n    });\n    \n    toast({\n      title: \"Import thành công\",\n      description: \"Dữ liệu đã được tải từ hệ thống có sẵn\",\n    });\n  };\n\n  const exportTemplate = () => {\n    const template = `Tên bãi xe,Địa chỉ,Vĩ độ,Kinh độ,Sức chứa xe máy,Sức chứa ô tô,Giá xe máy,Giá ô tô,Tiện ích,Mô tả\nBãi xe mẫu,\"123 Đường ABC, Quận 1\",10.7769,106.7009,50,20,5000,15000,\"covered,security\",\"Mô tả bãi xe\"`;\n    \n    const blob = new Blob([template], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'mau-dang-ky-bai-xe.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Template đã được tải\",\n      description: \"File mẫu CSV đã được tải xuống\",\n    });\n  };\n\n  const onSubmit = (data: FormData) => {\n    setIsSubmitting(true);\n    \n    const operatingHours = {\n      openTime: data.is24h ? \"00:00\" : data.openTime,\n      closeTime: data.is24h ? \"23:59\" : data.closeTime,\n      is24h: data.is24h,\n    };\n\n    const lotData: InsertParkingLot = {\n      name: data.name,\n      address: data.address,\n      latitude: data.latitude,\n      longitude: data.longitude,\n      ownerId: data.ownerId,\n      motorcycleCapacity: data.motorcycleCapacity,\n      carCapacity: data.carCapacity,\n      motorcyclePrice: data.motorcyclePrice,\n      carPrice: data.carPrice,\n      facilities: data.selectedFacilities,\n      operatingHours,\n      description: data.description,\n    };\n\n    createLotMutation.mutate(lotData, {\n      onSettled: () => setIsSubmitting(false),\n    });\n  };\n\n  return (\n    <div className=\"flex-1 bg-white\" data-testid=\"register-lot-page\">\n      <div className=\"max-w-2xl mx-auto p-4\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Đăng ký bãi xe</h1>\n          <p className=\"text-gray-600 mt-1\">Chia sẻ bãi xe của bạn với cộng đồng</p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Data Integration Options */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Zap className=\"mr-2 h-5 w-5\" />\n                    Tích hợp dữ liệu có sẵn\n                  </span>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowDataIntegration(!showDataIntegration)}\n                    data-testid=\"toggle-data-integration\"\n                  >\n                    {showDataIntegration ? \"Ẩn\" : \"Hiện\"} tùy chọn\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              {showDataIntegration && (\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Khu vực phổ biến</h4>\n                      <Select onValueChange={handleDistrictSelect}>\n                        <SelectTrigger data-testid=\"district-select\">\n                          <SelectValue placeholder=\"Chọn khu vực\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {popularDistricts.map((district) => (\n                            <SelectItem key={district.id} value={district.id}>\n                              {district.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Import dữ liệu</h4>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        onClick={handleImportData}\n                        data-testid=\"import-data-button\"\n                      >\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Tải dữ liệu mẫu\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Template CSV</h4>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        onClick={exportTemplate}\n                        data-testid=\"export-template-button\"\n                      >\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Tải template\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm text-blue-700\">\n                      <strong>Gợi ý:</strong> Sử dụng các tùy chọn trên để tự động điền thông tin từ hệ thống có sẵn, \n                      import dữ liệu từ file, hoặc tải template để chuẩn bị dữ liệu hàng loạt.\n                    </p>\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Thông tin cơ bản</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tên bãi xe *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"VD: Bãi xe Nguyễn Văn A\" \n                          {...field}\n                          data-testid=\"name-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Địa chỉ *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Textarea \n                            placeholder=\"Số nhà, tên đường, phường/xã, quận/huyện, TP.HCM\"\n                            rows={2}\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => {\n                              field.onChange(e);\n                              setAddressQuery(e.target.value);\n                              setShowAddressSuggestions(e.target.value.length > 2);\n                            }}\n                            onFocus={() => setShowAddressSuggestions(!!field.value && field.value.length > 2)}\n                            data-testid=\"address-input\"\n                          />\n                          {showAddressSuggestions && filteredAddresses.length > 0 && (\n                            <div className=\"absolute top-full left-0 right-0 z-10 bg-white border border-gray-200 rounded-md shadow-lg max-h-48 overflow-y-auto\">\n                              {filteredAddresses.slice(0, 5).map((address, index) => (\n                                <div\n                                  key={index}\n                                  className=\"p-2 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0\"\n                                  onClick={() => handleAddressSelect(address)}\n                                  data-testid={`address-suggestion-${index}`}\n                                >\n                                  <div className=\"flex items-center\">\n                                    <MapPin className=\"h-4 w-4 text-gray-400 mr-2\" />\n                                    <span className=\"text-sm\">{address}</span>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"text-sm font-medium text-gray-700\">Tọa độ GPS</h4>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        navigator.geolocation.getCurrentPosition(\n                          (position) => {\n                            form.setValue(\"latitude\", position.coords.latitude.toString());\n                            form.setValue(\"longitude\", position.coords.longitude.toString());\n                            toast({\n                              title: \"Đã lấy vị trí hiện tại\",\n                              description: \"Tọa độ GPS đã được cập nhật từ vị trí của bạn\",\n                            });\n                          },\n                          (error) => {\n                            toast({\n                              title: \"Không thể lấy vị trí\",\n                              description: \"Vui lòng cho phép truy cập vị trí hoặc nhập tọa độ thủ công\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        );\n                      }}\n                      data-testid=\"get-location-button\"\n                    >\n                      <MapPin className=\"mr-2 h-4 w-4\" />\n                      Lấy vị trí hiện tại\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"latitude\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vĩ độ</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              step=\"0.000001\"\n                              placeholder=\"10.7769\"\n                              {...field}\n                              data-testid=\"latitude-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"longitude\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Kinh độ</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              step=\"0.000001\"\n                              placeholder=\"106.7009\"\n                              {...field}\n                              data-testid=\"longitude-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Capacity & Pricing */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Sức chứa & Giá cả</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"motorcycleCapacity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Số chỗ xe máy</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"motorcycle-capacity-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"motorcyclePrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Giá xe máy (VNĐ/giờ)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            placeholder=\"5000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"motorcycle-price-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"carCapacity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Số chỗ ô tô</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"car-capacity-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"carPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Giá ô tô (VNĐ/giờ)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            placeholder=\"15000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"car-price-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Facilities */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Tiện ích</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"selectedFacilities\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                        {facilityOptions.map((facility) => (\n                          <div key={facility.id} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={facility.id}\n                              checked={field.value.includes(facility.id)}\n                              onCheckedChange={(checked) => {\n                                const updatedValue = checked\n                                  ? [...field.value, facility.id]\n                                  : field.value.filter((f) => f !== facility.id);\n                                field.onChange(updatedValue);\n                              }}\n                              data-testid={`facility-${facility.id}`}\n                            />\n                            <label htmlFor={facility.id} className=\"text-sm text-gray-700\">\n                              {facility.label}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Operating Hours */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Giờ hoạt động</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"openTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Giờ mở cửa</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"time\"\n                            disabled={form.watch(\"is24h\")}\n                            {...field}\n                            data-testid=\"open-time-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"closeTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Giờ đóng cửa</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"time\"\n                            disabled={form.watch(\"is24h\")}\n                            {...field}\n                            data-testid=\"close-time-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"is24h\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"24h-checkbox\"\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <label className=\"text-sm text-gray-700\">\n                          Hoạt động 24/7\n                        </label>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Additional Notes */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Ghi chú thêm</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mô tả bãi xe</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Thông tin bổ sung về bãi xe (lối vào, hướng dẫn đỗ xe, etc.)\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"description-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Photos Upload & Integration Options */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Hình ảnh & Tùy chọn bổ sung</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\">\n                    <CloudUpload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Nhấp để tải lên hình ảnh bãi xe</p>\n                    <p className=\"text-sm text-gray-500 mt-1\">PNG, JPG up to 10MB</p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-200\">\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2\">Kết nối API bản đồ</h4>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        onClick={() => {\n                          toast({\n                            title: \"Tính năng đang phát triển\",\n                            description: \"Kết nối với Google Maps API sẽ sớm được cập nhật\",\n                          });\n                        }}\n                        data-testid=\"maps-integration-button\"\n                      >\n                        <MapPin className=\"mr-2 h-4 w-4\" />\n                        Kết nối Maps API\n                      </Button>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2\">Đồng bộ dữ liệu</h4>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        onClick={() => {\n                          toast({\n                            title: \"Đồng bộ hoàn tất\",\n                            description: \"Dữ liệu đã được kiểm tra và xác thực\",\n                          });\n                        }}\n                        data-testid=\"sync-data-button\"\n                      >\n                        <Zap className=\"mr-2 h-4 w-4\" />\n                        Đồng bộ & xác thực\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Submit Buttons */}\n            <div className=\"flex items-center space-x-4 pt-6\">\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                data-testid=\"submit-button\"\n              >\n                {isSubmitting ? \"Đang đăng ký...\" : \"Đăng ký bãi xe\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={() => form.reset()}\n                data-testid=\"reset-form-button\"\n              >\n                Lưu nháp\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30865},"client/src/pages/rewards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Gift, \n  Star, \n  Plus, \n  Minus, \n  User, \n  Mail, \n  Phone,\n  Coffee,\n  Car as CarIcon,\n  Fuel\n} from \"lucide-react\";\nimport type { Reward, PointsHistory } from \"@shared/schema\";\n\nexport default function Rewards() {\n  const [currentUser] = useState({\n    id: \"demo-user\",\n    name: \"Nguyễn Văn A\",\n    email: \"nguyenvana@email.com\",\n    phone: \"0901234567\",\n    initials: \"NV\",\n    points: 1250,\n    tier: \"silver\",\n    joinDate: \"tháng 3/2024\",\n    vehicleType: \"motorcycle\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rewards = [] } = useQuery({\n    queryKey: [\"/api/rewards\"],\n  });\n\n  const { data: pointsHistory = [] } = useQuery({\n    queryKey: [\"/api/users\", currentUser.id, \"points-history\"],\n  });\n\n  const redeemRewardMutation = useMutation({\n    mutationFn: async (rewardId: string) => {\n      const response = await apiRequest(\"POST\", `/api/rewards/${rewardId}/redeem`, {\n        userId: currentUser.id\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Đổi thưởng thành công!\",\n        description: \"Voucher đã được gửi về email của bạn.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", currentUser.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", currentUser.id, \"points-history\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Lỗi đổi thưởng\",\n        description: error.message || \"Không thể đổi thưởng. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRedeemReward = (reward: Reward) => {\n    if (currentUser.points < reward.pointsCost) {\n      toast({\n        title: \"Không đủ điểm\",\n        description: `Bạn cần ${reward.pointsCost - currentUser.points} điểm nữa để đổi phần thưởng này.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    redeemRewardMutation.mutate(reward.id);\n  };\n\n  const getRewardIcon = (category: string) => {\n    switch (category) {\n      case \"transport\":\n        return <CarIcon className=\"text-warning text-xl\" />;\n      case \"food\":\n        return <Coffee className=\"text-orange-500 text-xl\" />;\n      case \"fuel\":\n        return <Fuel className=\"text-blue-500 text-xl\" />;\n      default:\n        return <Gift className=\"text-primary text-xl\" />;\n    }\n  };\n\n  const getTierProgress = () => {\n    if (currentUser.points >= 1500) return { current: \"gold\", progress: 100, nextTier: null, pointsNeeded: 0 };\n    if (currentUser.points >= 500) return { current: \"silver\", progress: ((currentUser.points - 500) / 1000) * 100, nextTier: \"Vàng\", pointsNeeded: 1500 - currentUser.points };\n    return { current: \"bronze\", progress: (currentUser.points / 500) * 100, nextTier: \"Bạc\", pointsNeeded: 500 - currentUser.points };\n  };\n\n  const tierInfo = getTierProgress();\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) return `${diffInMinutes} phút trước`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} giờ trước`;\n    if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)} ngày trước`;\n    return `${Math.floor(diffInMinutes / 10080)} tuần trước`;\n  };\n\n  const mockRecentActivities = [\n    { type: \"status_update\", description: \"Cập nhật tình trạng bãi xe\", location: \"Bãi xe Nguyễn Huệ\", points: 10, time: \"2 giờ trước\" },\n    { type: \"review\", description: \"Đánh giá bãi xe\", location: \"Bãi xe Vincom\", points: 5, time: \"Hôm qua\" },\n    { type: \"register_lot\", description: \"Đăng ký bãi xe mới\", location: \"Bãi xe Cafe ABC\", points: 50, time: \"3 ngày trước\" },\n    { type: \"reward_redemption\", description: \"Đổi voucher Grab\", location: \"\", points: -100, time: \"1 tuần trước\" },\n  ];\n\n  return (\n    <div className=\"flex-1 bg-white\" data-testid=\"rewards-page\">\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Điểm thưởng & Tài khoản</h1>\n          <p className=\"text-gray-600 mt-1\">Quản lý điểm thưởng và thông tin cá nhân</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Profile & Points */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Profile Card */}\n            <div className=\"bg-gradient-to-r from-primary to-primary-dark rounded-lg p-6 text-white\" data-testid=\"profile-card\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center text-2xl font-bold\">\n                  {currentUser.initials}\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-xl font-semibold\" data-testid=\"user-name\">{currentUser.name}</h2>\n                  <p className=\"opacity-90\" data-testid=\"user-email\">{currentUser.email}</p>\n                  <p className=\"text-sm opacity-75\">Thành viên từ {currentUser.joinDate}</p>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                <div className=\"bg-white bg-opacity-20 rounded-lg p-3\">\n                  <p className=\"text-sm opacity-75\">Điểm hiện có</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"current-points\">{currentUser.points.toLocaleString()}</p>\n                </div>\n                <div className=\"bg-white bg-opacity-20 rounded-lg p-3\">\n                  <p className=\"text-sm opacity-75\">Hạng thành viên</p>\n                  <p className=\"text-lg font-semibold capitalize\" data-testid=\"member-tier\">{tierInfo.current}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Activities */}\n            <Card data-testid=\"activities-card\">\n              <CardHeader>\n                <CardTitle>Lịch sử đóng góp</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockRecentActivities.map((activity, index) => (\n                    <div key={index} className=\"flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0\" data-testid={`activity-${index}`}>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                          activity.points > 0 ? \"bg-success-100\" : \"bg-danger-100\"\n                        }`}>\n                          {activity.points > 0 ? (\n                            <Plus className={`${activity.points > 0 ? \"text-success\" : \"text-danger\"} text-xs`} />\n                          ) : (\n                            <Minus className=\"text-danger text-xs\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{activity.description}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {activity.location ? `${activity.location} - ${activity.time}` : activity.time}\n                          </p>\n                        </div>\n                      </div>\n                      <span className={`text-sm font-medium ${activity.points > 0 ? \"text-success\" : \"text-danger\"}`}>\n                        {activity.points > 0 ? \"+\" : \"\"}{activity.points}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Edit Profile */}\n            <Card data-testid=\"profile-form\">\n              <CardHeader>\n                <CardTitle>Thông tin cá nhân</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Họ và tên</label>\n                      <Input \n                        defaultValue={currentUser.name}\n                        data-testid=\"profile-name-input\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Số điện thoại</label>\n                      <Input \n                        type=\"tel\"\n                        defaultValue={currentUser.phone}\n                        data-testid=\"profile-phone-input\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n                    <Input \n                      type=\"email\"\n                      defaultValue={currentUser.email}\n                      data-testid=\"profile-email-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phương tiện chính</label>\n                    <Select defaultValue={currentUser.vehicleType}>\n                      <SelectTrigger data-testid=\"vehicle-type-select\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"motorcycle\">Xe máy</SelectItem>\n                        <SelectItem value=\"car\">Ô tô</SelectItem>\n                        <SelectItem value=\"both\">Cả hai</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button data-testid=\"update-profile-button\">\n                    Cập nhật thông tin\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Rewards Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Available Rewards */}\n            <Card data-testid=\"rewards-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Gift className=\"mr-2 h-5 w-5\" />\n                  Đổi điểm thưởng\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(rewards as Reward[]).map((reward: Reward) => (\n                    <div key={reward.id} className=\"border border-gray-200 rounded-lg p-3\" data-testid={`reward-${reward.id}`}>\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        {getRewardIcon(reward.category)}\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-gray-900\">{reward.name}</p>\n                          <p className=\"text-xs text-gray-500\">{reward.description}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-primary\">{reward.pointsCost} điểm</span>\n                        <Button\n                          size=\"sm\"\n                          disabled={currentUser.points < reward.pointsCost || redeemRewardMutation.isPending}\n                          onClick={() => handleRedeemReward(reward)}\n                          data-testid={`redeem-${reward.id}`}\n                        >\n                          {currentUser.points < reward.pointsCost ? \"Chưa đủ điểm\" : \"Đổi\"}\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Points Guide */}\n            <Card data-testid=\"points-guide\">\n              <CardHeader>\n                <CardTitle>Cách kiếm điểm</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Cập nhật tình trạng bãi xe</span>\n                    <span className=\"text-success font-medium\">+10</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Đánh giá bãi xe</span>\n                    <span className=\"text-success font-medium\">+5</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Đăng ký bãi xe mới</span>\n                    <span className=\"text-success font-medium\">+50</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Báo cáo chính xác</span>\n                    <span className=\"text-success font-medium\">+20</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Member Tiers */}\n            <Card data-testid=\"member-tiers\">\n              <CardHeader>\n                <CardTitle>Hạng thành viên</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className={`flex items-center justify-between ${tierInfo.current === \"bronze\" ? \"bg-gray-50 p-2 rounded\" : \"\"}`}>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                      <span className={`text-sm ${tierInfo.current === \"bronze\" ? \"font-medium text-gray-900\" : \"text-gray-600\"}`}>Đồng</span>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">0-499 điểm</span>\n                  </div>\n                  <div className={`flex items-center justify-between ${tierInfo.current === \"silver\" ? \"bg-gray-50 p-2 rounded\" : \"\"}`}>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n                      <span className={`text-sm ${tierInfo.current === \"silver\" ? \"font-medium text-gray-900\" : \"text-gray-600\"}`}>Bạc</span>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">500-1499 điểm</span>\n                  </div>\n                  <div className={`flex items-center justify-between ${tierInfo.current === \"gold\" ? \"bg-gray-50 p-2 rounded\" : \"\"}`}>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-warning rounded-full\"></div>\n                      <span className={`text-sm ${tierInfo.current === \"gold\" ? \"font-medium text-gray-900\" : \"text-gray-600\"}`}>Vàng</span>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">1500+ điểm</span>\n                  </div>\n                </div>\n                \n                {tierInfo.nextTier && (\n                  <>\n                    <div className=\"mt-3 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${tierInfo.progress}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\" data-testid=\"tier-progress\">\n                      {tierInfo.pointsNeeded} điểm nữa để lên hạng {tierInfo.nextTier}\n                    </p>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16733},"client/src/pages/search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Search as SearchIcon, MapPin } from \"lucide-react\";\nimport ParkingCard from \"@/components/parking/parking-card\";\nimport ParkingDetailModal from \"@/components/parking/parking-detail-modal\";\nimport type { ParkingLot } from \"@shared/schema\";\n\nexport default function Search() {\n  const [selectedLot, setSelectedLot] = useState<ParkingLot | null>(null);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    distance: \"1\",\n    priceRange: \"5000-10000\",\n    vehicleTypes: [] as string[],\n    availability: \"all\",\n    facilities: [] as string[],\n    minRating: \"0\",\n  });\n\n  const { data: searchResults = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/parking-lots/search\", filters],\n    enabled: false, // Only search when user clicks search button\n  });\n\n  const handleSearch = () => {\n    refetch();\n  };\n\n  const handleFilterChange = (key: string, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleVehicleTypeChange = (type: string, checked: boolean) => {\n    setFilters(prev => ({\n      ...prev,\n      vehicleTypes: checked \n        ? [...prev.vehicleTypes, type]\n        : prev.vehicleTypes.filter(t => t !== type)\n    }));\n  };\n\n  const handleFacilityChange = (facility: string, checked: boolean) => {\n    setFilters(prev => ({\n      ...prev,\n      facilities: checked \n        ? [...prev.facilities, facility]\n        : prev.facilities.filter(f => f !== facility)\n    }));\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      search: \"\",\n      distance: \"1\",\n      priceRange: \"5000-10000\",\n      vehicleTypes: [],\n      availability: \"all\",\n      facilities: [],\n      minRating: \"0\",\n    });\n  };\n\n  return (\n    <div className=\"flex-1 bg-white\" data-testid=\"search-page\">\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Tìm kiếm nâng cao</h1>\n          <p className=\"text-gray-600 mt-1\">Tìm bãi xe phù hợp với nhu cầu của bạn</p>\n        </div>\n\n        {/* Advanced Filters */}\n        <Card className=\"mb-6\" data-testid=\"filters-card\">\n          <CardHeader>\n            <CardTitle>Bộ lọc tìm kiếm</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Search Input */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tìm kiếm\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Tên bãi xe hoặc địa chỉ...\"\n                  value={filters.search}\n                  onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n                  data-testid=\"search-filter-input\"\n                />\n              </div>\n\n              {/* Distance Filter */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Khoảng cách\n                </label>\n                <Select \n                  value={filters.distance} \n                  onValueChange={(value) => handleFilterChange(\"distance\", value)}\n                >\n                  <SelectTrigger data-testid=\"distance-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"0.5\">Trong 500m</SelectItem>\n                    <SelectItem value=\"1\">Trong 1km</SelectItem>\n                    <SelectItem value=\"2\">Trong 2km</SelectItem>\n                    <SelectItem value=\"5\">Trong 5km</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Price Range */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Giá cả (VNĐ/giờ)\n                </label>\n                <Select \n                  value={filters.priceRange} \n                  onValueChange={(value) => handleFilterChange(\"priceRange\", value)}\n                >\n                  <SelectTrigger data-testid=\"price-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"0-5000\">Dưới 5,000</SelectItem>\n                    <SelectItem value=\"5000-10000\">5,000 - 10,000</SelectItem>\n                    <SelectItem value=\"10000-20000\">10,000 - 20,000</SelectItem>\n                    <SelectItem value=\"20000+\">Trên 20,000</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Vehicle Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Loại xe\n                </label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"motorcycle\"\n                      checked={filters.vehicleTypes.includes(\"motorcycle\")}\n                      onCheckedChange={(checked) => handleVehicleTypeChange(\"motorcycle\", !!checked)}\n                      data-testid=\"motorcycle-checkbox\"\n                    />\n                    <label htmlFor=\"motorcycle\" className=\"text-sm text-gray-700\">\n                      Xe máy\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"car\"\n                      checked={filters.vehicleTypes.includes(\"car\")}\n                      onCheckedChange={(checked) => handleVehicleTypeChange(\"car\", !!checked)}\n                      data-testid=\"car-checkbox\"\n                    />\n                    <label htmlFor=\"car\" className=\"text-sm text-gray-700\">\n                      Ô tô\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Availability */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tình trạng\n                </label>\n                <Select \n                  value={filters.availability} \n                  onValueChange={(value) => handleFilterChange(\"availability\", value)}\n                >\n                  <SelectTrigger data-testid=\"availability-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tất cả</SelectItem>\n                    <SelectItem value=\"available\">Còn chỗ</SelectItem>\n                    <SelectItem value=\"almost_full\">Sắp hết chỗ</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Facilities */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tiện ích\n                </label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"covered\"\n                      checked={filters.facilities.includes(\"covered\")}\n                      onCheckedChange={(checked) => handleFacilityChange(\"covered\", !!checked)}\n                      data-testid=\"covered-checkbox\"\n                    />\n                    <label htmlFor=\"covered\" className=\"text-sm text-gray-700\">\n                      Có mái che\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"security\"\n                      checked={filters.facilities.includes(\"security\")}\n                      onCheckedChange={(checked) => handleFacilityChange(\"security\", !!checked)}\n                      data-testid=\"security-checkbox\"\n                    />\n                    <label htmlFor=\"security\" className=\"text-sm text-gray-700\">\n                      Bảo vệ 24/7\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Rating */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Đánh giá tối thiểu\n                </label>\n                <Select \n                  value={filters.minRating} \n                  onValueChange={(value) => handleFilterChange(\"minRating\", value)}\n                >\n                  <SelectTrigger data-testid=\"rating-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"0\">Bất kỳ</SelectItem>\n                    <SelectItem value=\"3\">3 sao trở lên</SelectItem>\n                    <SelectItem value=\"4\">4 sao trở lên</SelectItem>\n                    <SelectItem value=\"5\">5 sao</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3 mt-6\">\n              <Button onClick={handleSearch} data-testid=\"search-button\">\n                <SearchIcon className=\"mr-2 h-4 w-4\" />\n                Áp dụng bộ lọc\n              </Button>\n              <Button variant=\"outline\" onClick={resetFilters} data-testid=\"reset-button\">\n                Đặt lại\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Search Results */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Results List */}\n          <div className=\"space-y-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Kết quả tìm kiếm</h2>\n            \n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p>Đang tìm kiếm...</p>\n              </div>\n            ) : (searchResults as ParkingLot[]).length > 0 ? (\n              <div className=\"space-y-4\" data-testid=\"search-results\">\n                {(searchResults as ParkingLot[]).map((lot: ParkingLot) => (\n                  <ParkingCard\n                    key={lot.id}\n                    lot={lot}\n                    onClick={() => setSelectedLot(lot)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\" data-testid=\"no-search-results\">\n                <SearchIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>Nhập từ khóa và nhấn \"Áp dụng bộ lọc\" để tìm kiếm bãi xe</p>\n              </div>\n            )}\n          </div>\n\n          {/* Map View Placeholder */}\n          <div className=\"bg-gray-100 rounded-lg p-4 h-96\">\n            <div className=\"w-full h-full bg-gray-200 rounded-lg flex items-center justify-center text-gray-500\">\n              <div className=\"text-center\">\n                <MapPin className=\"h-12 w-12 mx-auto mb-4\" />\n                <p>Bản đồ sẽ hiển thị kết quả tìm kiếm</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Parking Detail Modal */}\n      <ParkingDetailModal\n        lot={selectedLot}\n        open={!!selectedLot}\n        onOpenChange={(open) => !open && setSelectedLot(null)}\n      />\n    </div>\n  );\n}\n","size_bytes":12025},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Search, PlusCircle, Users, Gift } from \"lucide-react\";\n\nconst navItems = [\n  { path: \"/\", label: \"Trang chủ\", icon: Home },\n  { path: \"/search\", label: \"Tìm kiếm\", icon: Search },\n  { path: \"/register-lot\", label: \"Đăng ký\", icon: PlusCircle },\n  { path: \"/community\", label: \"Cộng đồng\", icon: Users },\n  { path: \"/rewards\", label: \"Thưởng\", icon: Gift },\n];\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"md:hidden bg-white border-t border-gray-200 fixed bottom-0 left-0 right-0 z-50\" data-testid=\"mobile-nav\">\n      <div className=\"grid grid-cols-5 h-16\">\n        {navItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div className={`flex flex-col items-center justify-center space-y-1 h-full ${\n                isActive ? \"text-primary\" : \"text-gray-400\"\n              }`}\n              data-testid={`mobile-nav-${item.path.replace(\"/\", \"\") || \"home\"}`}>\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs\">{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1352},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Search, PlusCircle, Users, Gift, Car } from \"lucide-react\";\n\ninterface SidebarProps {\n  currentUser: {\n    id: string;\n    name: string;\n    email: string;\n    initials: string;\n    points: number;\n    tier: string;\n  };\n}\n\nconst navItems = [\n  { path: \"/\", label: \"Trang chủ\", icon: Home },\n  { path: \"/search\", label: \"Tìm kiếm\", icon: Search },\n  { path: \"/register-lot\", label: \"Đăng ký bãi xe\", icon: PlusCircle },\n  { path: \"/community\", label: \"Cộng đồng\", icon: Users },\n  { path: \"/rewards\", label: \"Điểm thưởng\", icon: Gift },\n];\n\nexport default function Sidebar({ currentUser }: SidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"hidden md:flex md:flex-col md:w-64 bg-white border-r border-gray-200\" data-testid=\"sidebar\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <Car className=\"text-primary text-2xl\" data-testid=\"logo-icon\" />\n          <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"app-title\">ParkFinder</h1>\n        </div>\n        <p className=\"text-sm text-gray-500 mt-1\">Tìm bãi giữ xe TP.HCM</p>\n      </div>\n      \n      <nav className=\"flex-1 p-4\" data-testid=\"sidebar-nav\">\n        <ul className=\"space-y-2\">\n          {navItems.map((item) => {\n            const isActive = location === item.path;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.path}>\n                <Link href={item.path}>\n                  <div className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n                    isActive \n                      ? \"bg-primary text-white\" \n                      : \"text-gray-700 hover:bg-gray-100\"\n                  }`}\n                  data-testid={`nav-${item.path.replace(\"/\", \"\") || \"home\"}`}>\n                    <Icon className=\"h-5 w-5\" />\n                    <span>{item.label}</span>\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      <div className=\"p-4 border-t border-gray-200\" data-testid=\"user-profile\">\n        <div className=\"flex items-center space-x-3 p-3 rounded-lg bg-gray-50\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-semibold\" data-testid=\"user-avatar\">\n            <span>{currentUser.initials}</span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\" data-testid=\"user-name\">{currentUser.name}</p>\n            <p className=\"text-xs text-primary\" data-testid=\"user-points\">{currentUser.points.toLocaleString()} điểm</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2858},"client/src/components/map/simple-map.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Minus, Navigation, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ParkingLot } from \"@shared/schema\";\n\ninterface SimpleMapProps {\n  parkingLots: ParkingLot[];\n  onParkingLotClick: (lot: ParkingLot) => void;\n}\n\nexport default function SimpleMap({ parkingLots, onParkingLotClick }: SimpleMapProps) {\n  const [zoom, setZoom] = useState(1);\n\n  const getStatusColor = (lot: ParkingLot) => {\n    const hasAvailableSpots = lot.currentMotorcycleSpots > 0 || lot.currentCarSpots > 0;\n    return hasAvailableSpots ? \"bg-success\" : \"bg-danger\";\n  };\n\n  return (\n    <div className=\"relative w-full h-full bg-cover bg-center\" \n         style={{\n           backgroundImage: \"url('https://images.unsplash.com/photo-1583417319070-4a69db38a482?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800')\"\n         }}\n         data-testid=\"parking-map\">\n      \n      {/* Map Overlay */}\n      <div className=\"absolute inset-0 bg-blue-900 bg-opacity-20\"></div>\n      \n      {/* Current Location */}\n      <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\" data-testid=\"current-location\">\n        <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-pulse\">\n          <Navigation className=\"w-3 h-3 fill-current\" />\n        </div>\n      </div>\n\n      {/* Parking Lot Markers */}\n      {parkingLots.map((lot, index) => {\n        // Position markers based on their index for demo purposes\n        const positions = [\n          { top: \"25%\", left: \"33%\" },\n          { top: \"50%\", left: \"66%\" },\n          { top: \"75%\", left: \"50%\" },\n          { top: \"40%\", left: \"25%\" },\n          { top: \"60%\", left: \"75%\" },\n        ];\n        const position = positions[index % positions.length];\n\n        return (\n          <div\n            key={lot.id}\n            className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n            style={{ top: position.top, left: position.left }}\n            data-testid={`marker-${lot.id}`}\n          >\n            <button\n              onClick={() => onParkingLotClick(lot)}\n              className={`${getStatusColor(lot)} text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold shadow-lg cursor-pointer transform hover:scale-110 transition-transform`}\n              data-testid={`marker-button-${lot.id}`}\n            >\n              <MapPin className=\"w-4 h-4\" />\n            </button>\n            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 mt-1 bg-white px-2 py-1 rounded shadow-lg text-xs whitespace-nowrap\">\n              {lot.name}\n            </div>\n          </div>\n        );\n      })}\n\n      {/* Map Controls */}\n      <div className=\"absolute top-4 right-4 flex flex-col space-y-2\" data-testid=\"map-controls\">\n        <Button\n          size=\"icon\"\n          variant=\"secondary\"\n          onClick={() => setZoom(Math.min(zoom + 0.5, 3))}\n          className=\"bg-white shadow-lg\"\n          data-testid=\"zoom-in\"\n        >\n          <Plus className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant=\"secondary\"\n          onClick={() => setZoom(Math.max(zoom - 0.5, 0.5))}\n          className=\"bg-white shadow-lg\"\n          data-testid=\"zoom-out\"\n        >\n          <Minus className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant=\"secondary\"\n          className=\"bg-white shadow-lg\"\n          data-testid=\"center-location\"\n        >\n          <Navigation className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3667},"client/src/components/parking/parking-card.tsx":{"content":"import { MapPin, Star, Car, Bike, Clock } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport type { ParkingLot } from \"@shared/schema\";\n\ninterface ParkingCardProps {\n  lot: ParkingLot;\n  onClick: () => void;\n}\n\nexport default function ParkingCard({ lot, onClick }: ParkingCardProps) {\n  const hasAvailableSpots = lot.currentMotorcycleSpots > 0 || lot.currentCarSpots > 0;\n  const statusColor = hasAvailableSpots ? \"text-success\" : \"text-danger\";\n  const statusText = hasAvailableSpots ? \"Còn chỗ\" : \"Hết chỗ\";\n  \n  return (\n    <Card \n      className=\"p-4 hover:bg-gray-50 cursor-pointer transition-colors\" \n      onClick={onClick}\n      data-testid={`parking-card-${lot.id}`}\n    >\n      <div className=\"flex items-start space-x-3\">\n        <div className=\"flex-shrink-0\">\n          <div className={`w-12 h-12 ${hasAvailableSpots ? \"bg-success\" : \"bg-danger\"} rounded-lg flex items-center justify-center text-white`}>\n            <Car className=\"h-6 w-6\" />\n          </div>\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-sm font-medium text-gray-900 truncate\" data-testid={`lot-name-${lot.id}`}>\n              {lot.name}\n            </h3>\n            <span className={`text-xs font-medium ${statusColor}`} data-testid={`lot-status-${lot.id}`}>\n              {statusText}\n            </span>\n          </div>\n          <div className=\"flex items-center text-xs text-gray-500 mt-1\">\n            <MapPin className=\"h-3 w-3 mr-1\" />\n            <span className=\"truncate\" data-testid={`lot-address-${lot.id}`}>{lot.address}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between mt-2\">\n            <div className=\"flex items-center space-x-3 text-xs text-gray-600\">\n              {lot.motorcycleCapacity > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <Bike className=\"h-3 w-3\" />\n                  <span data-testid={`motorcycle-price-${lot.id}`}>{lot.motorcyclePrice.toLocaleString()} VNĐ/giờ</span>\n                </div>\n              )}\n              {lot.carCapacity > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <Car className=\"h-3 w-3\" />\n                  <span data-testid={`car-price-${lot.id}`}>{lot.carPrice.toLocaleString()} VNĐ/giờ</span>\n                </div>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-1 text-xs text-gray-600\">\n              <MapPin className=\"h-3 w-3\" />\n              <span data-testid={`lot-distance-${lot.id}`}>150m</span>\n            </div>\n          </div>\n          \n          {lot.rating && parseFloat(lot.rating) > 0 && (\n            <div className=\"flex items-center mt-2\">\n              <div className=\"flex items-center space-x-1\">\n                <Star className=\"h-3 w-3 text-warning fill-current\" />\n                <span className=\"text-xs text-gray-600\" data-testid={`lot-rating-${lot.id}`}>\n                  {parseFloat(lot.rating).toFixed(1)} ({lot.totalReviews} đánh giá)\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3262},"client/src/components/parking/parking-detail-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Star, Car, Bike, Navigation, Flag, Share2 } from \"lucide-react\";\nimport type { ParkingLot } from \"@shared/schema\";\n\ninterface ParkingDetailModalProps {\n  lot: ParkingLot | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ParkingDetailModal({ lot, open, onOpenChange }: ParkingDetailModalProps) {\n  if (!lot) return null;\n\n  const hasAvailableSpots = lot.currentMotorcycleSpots > 0 || lot.currentCarSpots > 0;\n  \n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\" data-testid=\"parking-detail-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">{lot.name}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Status Badge */}\n          <div className=\"flex items-center justify-between\">\n            <Badge \n              variant={hasAvailableSpots ? \"default\" : \"destructive\"}\n              className={hasAvailableSpots ? \"bg-success hover:bg-success\" : \"\"}\n              data-testid=\"status-badge\"\n            >\n              <div className=\"w-2 h-2 rounded-full bg-current mr-2\"></div>\n              {hasAvailableSpots ? \"Còn chỗ trống\" : \"Hết chỗ\"}\n            </Badge>\n            <div className=\"text-sm text-gray-500\" data-testid=\"last-updated\">\n              Cập nhật 5 phút trước\n            </div>\n          </div>\n\n          {/* Address */}\n          <div className=\"flex items-start space-x-3\">\n            <MapPin className=\"text-gray-400 mt-1 h-4 w-4\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\" data-testid=\"modal-address\">{lot.address}</p>\n              <p className=\"text-xs text-gray-500\">Cách bạn 150m (2 phút đi bộ)</p>\n            </div>\n          </div>\n\n          {/* Pricing */}\n          <div className=\"bg-gray-50 rounded-lg p-3\" data-testid=\"pricing-section\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Giá cả</h3>\n            <div className=\"space-y-2\">\n              {lot.motorcycleCapacity > 0 && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center space-x-2\">\n                    <Bike className=\"text-gray-400 h-4 w-4\" />\n                    <span>Xe máy</span>\n                  </span>\n                  <span className=\"font-medium\" data-testid=\"modal-motorcycle-price\">\n                    {lot.motorcyclePrice.toLocaleString()} VNĐ/giờ\n                  </span>\n                </div>\n              )}\n              {lot.carCapacity > 0 && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center space-x-2\">\n                    <Car className=\"text-gray-400 h-4 w-4\" />\n                    <span>Ô tô</span>\n                  </span>\n                  <span className=\"font-medium\" data-testid=\"modal-car-price\">\n                    {lot.carPrice.toLocaleString()} VNĐ/giờ\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Capacity */}\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">Sức chứa</span>\n            <span className=\"text-sm font-medium\" data-testid=\"modal-capacity\">\n              {lot.motorcycleCapacity > 0 && `${lot.motorcycleCapacity} xe máy`}\n              {lot.motorcycleCapacity > 0 && lot.carCapacity > 0 && \", \"}\n              {lot.carCapacity > 0 && `${lot.carCapacity} ô tô`}\n            </span>\n          </div>\n\n          {/* Rating */}\n          {lot.rating && parseFloat(lot.rating) > 0 && (\n            <div className=\"flex items-center space-x-2\" data-testid=\"modal-rating\">\n              <div className=\"flex items-center\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-4 w-4 ${\n                      star <= Math.round(parseFloat(lot.rating!))\n                        ? \"text-warning fill-current\"\n                        : \"text-gray-300\"\n                    }`}\n                  />\n                ))}\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {parseFloat(lot.rating).toFixed(1)} ({lot.totalReviews} đánh giá)\n              </span>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3 pt-2\">\n            <Button className=\"w-full\" data-testid=\"navigate-button\">\n              <Navigation className=\"mr-2 h-4 w-4\" />\n              Chỉ đường đến bãi xe\n            </Button>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button variant=\"outline\" className=\"flex items-center\" data-testid=\"report-button\">\n                <Flag className=\"mr-2 h-4 w-4\" />\n                Báo cáo\n              </Button>\n              <Button variant=\"outline\" className=\"flex items-center\" data-testid=\"share-button\">\n                <Share2 className=\"mr-2 h-4 w-4\" />\n                Chia sẻ\n              </Button>\n            </div>\n          </div>\n\n          {/* Recent Comments */}\n          {lot.description && (\n            <div className=\"border-t border-gray-200 pt-4\">\n              <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Mô tả</h3>\n              <p className=\"text-sm text-gray-600\" data-testid=\"lot-description\">{lot.description}</p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5840},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}